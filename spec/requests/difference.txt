3,18c3,8
< describe "Authentication" do 
< subject{page}
< describe "with valid information" do
< let(:user) { FactoryGirl.create(:user) }
< before { sign_in user }
< it { should have_title(user.name) }
< it { should have_link('Users',       href: users_path) }
< it { should have_link('Profile',     href: user_path(user)) }
< it { should have_link('Settings',    href: edit_user_path(user)) }
< it { should have_link('Sign out',    href: signout_path) }
< it { should_not have_link('Sign in', href: signin_path) }
< end
< describe "signin page" do 
< before {visit signin_path}
< it { should have_content('Sign in')}
< it { should have_title('Sign in')}
---
> describe "Authentication" do
> subject { page }
> describe "signin page" do
> before { visit signin_path }
> it { should have_selector('h1',    text: 'Sign in') }
> it { should have_selector('title', text: 'Sign in') }
24,25c14,15
< it { should have_title('Sign in') }
< it { should have_selector('div.alert.alert-error') }
---
> it { should have_selector('title', text: 'Sign in') }
> it { should have_selector('div.alert.alert-error', text: 'Invalid') }
33,38c23,29
< before do
< fill_in "Email",    with: user.email.upcase
< fill_in "Password", with: user.password
< click_button "Sign in"
< end
< 
---
> before { sign_in user }
> it { should have_selector('title', text: user.name) }
> it { should have_link('Users',    href: users_path) }
> it { should have_link('Profile',  href: user_path(user)) }
> it { should have_link('Settings', href: edit_user_path(user)) }
> it { should have_link('Sign out', href: signout_path) }
> it { should_not have_link('Sign in', href: signin_path) }
43,48d33
< 
< it {should have_title(user.name)}
< it {should have_link('Profile', href: user_path(user))}
< it { should have_link('Settings',    href: edit_user_path(user)) }
< it {should have_link('Sign out', href: signout_path)}
< it {should_not have_link('Sign in', href: signin_path)}
51,52d35
< 
< 
65c48
< expect(page).to have_title('Edit user')
---
> page.should have_selector('title', text: 'Edit user')
68a52,64
> describe "in the Microposts controller" do
> describe "submitting to the create action" do
> before { post microposts_path }
> specify { response.should redirect_to(signin_path) }
> end
> describe "submitting to the destroy action" do
> before do
> micropost = FactoryGirl.create(:micropost)
> delete micropost_path(micropost)
> end
> specify { response.should redirect_to(signin_path) }
> end
> end
72a69
> end
91,112d87
< end
< describe " in the Microposts controller" do 
< describe "submitting to the create action" do
< before {post microposts_path}
< specify{expect(response).to redirect_to(signin_path)}
< end
< describe "submitting to the destroy action" do
< before { delete micropost_path(FactoryGirl.create(:micropost)) }
< specify { expect(response).to redirect_to(signin_path) }
< end
< end
< describe "in the Relationships controller" do
< describe "submitting to the create action" do
< before { post relationships_path }
< specify { expect(response).to redirect_to(signin_path) }
< end
< describe "submitting to the destroy action" do
< before { delete relationship_path(1) }
< specify { expect(response).to redirect_to(signin_path) }
< end
< end
< end
116,126c91,98
< before { sign_in user, no_capybara: true }
< 
< describe "submitting a GET request to the Users#edit action" do
< before { get edit_user_path(wrong_user) }
< specify { expect(response.body).not_to match(full_title('Edit user')) }
< specify { expect(response).to redirect_to(root_url) }
< end
< 
< describe "submitting a PATCH request to the Users#update action" do
< before { patch user_path(wrong_user) }
< specify { expect(response).to redirect_to(root_url) }
---
> before { sign_in user }
> describe "visiting Users#edit page" do
> before { visit edit_user_path(wrong_user) }
> it { should have_selector('title', text: full_title('')) }
> end
> describe "submitting a PUT request to the Users#update action" do
> before { put user_path(wrong_user) }
> specify { response.should redirect_to(root_path) }
132c104
< before { sign_in non_admin, no_capybara: true }
---
> before { sign_in non_admin }
135c107
< specify { expect(response).to redirect_to(root_url) }
---
> specify { response.should redirect_to(root_path) }        
139,141c111
< 
< 
< 
---
> end
\ No newline at end of file
